{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "contracts/CompanyManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.7.0 <0.9.0;\n\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract CompanyManager {\n    address public owner;\n    IERC20 public usdc;\n    uint256 public creditCounter;\n    uint256 public ownerBalance;\n\n    struct Company {\n        bool isWhitelisted;\n        uint256 balance;\n        uint256 premium;\n        address companyAddress;\n        bool isActive;\n        uint256 protocolFee;\n        uint256 creditBalance;\n        uint256 avaiableBalance;\n    }\n\n    mapping(address => Company) public companies;\n\n    struct User {\n        address owner;\n        uint256 creditScore;\n        bool hasActiveCredit;\n        address registerBy;\n    }\n\n    struct UserStats {\n        bool exists;\n        address user;\n        uint256 creditsReceived;\n        uint256 creditsPaid;\n        uint256 score;\n        uint256 avaiableOnTimeScore;\n    }\n\n    mapping(address => UserStats) public userStats;\n\n    struct Credit {\n        address user;\n        uint256 amount; // monto prestado\n        address lender;\n        uint256 rate; // %5\n        uint256 nextInstallmentDate;\n        uint256 totalInstallments;\n        uint256 protocolFee;\n        uint256 totalAmount; // motno + fee + interes\n        uint256 id;\n        bool isActive;\n        bool isPaid;\n    }\n\n    struct Installment {\n        uint256 creditId;\n        uint256 amount;\n        uint256 numberInstallment;\n        bool isPaid;\n        uint256 score;\n        uint256 date;\n    }\n\n    mapping(uint256 creditId => Installment[]) public installments;\n\n    mapping(address company => Credit[]) public companyRegisteredCredits;\n\n    function addInstallment(\n        uint256 key,\n        uint256 _amount,\n        uint256 _numberInstallment\n    ) internal {\n        Installment memory newInstallment = Installment({\n            creditId: key,\n            amount: _amount,\n            numberInstallment: _numberInstallment,\n            isPaid: false,\n            score: _amount,\n            date: block.timestamp + (30 days * (_numberInstallment + 1))\n        });\n\n        // Agregar el nuevo installment al array dentro del mapping\n        installments[key].push(newInstallment);\n    }\n\n    mapping(uint256 creditId => Credit) public credits;\n    mapping(address user => Credit) public recentCredits;\n\n    mapping(address user => User) public users;\n\n    constructor(address _usdcAddress) {\n        owner = msg.sender;\n        creditCounter = 0;\n        usdc = IERC20(_usdcAddress);\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Only owner can call this function\");\n        _;\n    }\n\n    modifier onlyWhitelisted() {\n        require(\n            companies[msg.sender].isWhitelisted == true,\n            \"Company is not whitelisted\"\n        );\n        _;\n    }\n\n    modifier onlyActive() {\n        require(\n            companies[msg.sender].isActive == true,\n            \"Company is not active\"\n        );\n        _;\n    }\n\n    function registerCompany(\n        address _companyAddress,\n        uint256 _protocolFee\n    ) external onlyOwner {\n        companies[_companyAddress].isWhitelisted = true;\n        companies[_companyAddress].companyAddress = _companyAddress;\n        companies[_companyAddress].isActive = true;\n        companies[_companyAddress].balance = 0;\n        companies[_companyAddress].creditBalance = 0;\n        companies[_companyAddress].avaiableBalance = 0;\n        companies[_companyAddress].protocolFee = _protocolFee;\n    }\n\n    function addFundsCompany(\n        uint256 _amount\n    ) external onlyActive onlyWhitelisted {\n        // Transfer USDC from the caller to the contract\n        require(\n            usdc.transferFrom(msg.sender, address(this), _amount),\n            \"USDC transfer failed\"\n        );\n\n        // Calculate the owner's share (protocol fee)\n        uint256 _ownerAmount = (_amount * companies[msg.sender].protocolFee) /\n            100;\n\n        // Update the company's balance and available balance\n        companies[msg.sender].balance += _amount - _ownerAmount;\n        companies[msg.sender].avaiableBalance += _amount - _ownerAmount;\n\n        // Update the owner's balance\n        ownerBalance += _ownerAmount;\n    }\n\n    function withdrawFundsCompany(\n        uint256 _amount\n    ) external onlyActive onlyWhitelisted {\n        // Ensure the company has sufficient balance\n        require(\n            companies[msg.sender].balance >= _amount,\n            \"No hay suficiente fondos\"\n        );\n\n        // Update the company's balance\n        companies[msg.sender].balance -= _amount;\n        companies[msg.sender].avaiableBalance -= _amount;\n\n        // Transfer USDC tokens to the company\n        bool success = usdc.transfer(msg.sender, _amount);\n        require(success, \"Transferencia fallida\");\n    }\n\n    function withdrawOwnerFunds(uint256 _amount) external onlyOwner {\n        require(ownerBalance >= _amount, \"No hay suficiente fondos\");\n        ownerBalance -= _amount;\n        bool success = usdc.transfer(msg.sender, _amount);\n        require(success, \"Transferencia fallida\");\n    }\n\n    function registerUser(\n        address _userAddress\n    ) external onlyActive onlyWhitelisted {\n        users[_userAddress].owner = _userAddress;\n        users[_userAddress].hasActiveCredit = false;\n        users[_userAddress].registerBy = msg.sender;\n        userStats[msg.sender].exists = true;\n    }\n\n    function registerCredit(\n        address _user,\n        uint256 _amount,\n        uint256 _rate,\n        uint256 _totalInstallments\n    ) external onlyActive onlyWhitelisted {\n        require(\n            companies[msg.sender].avaiableBalance >= _amount,\n            \"Fondos insuficientes\"\n        );\n        require(\n            users[_user].hasActiveCredit == false,\n            \"El usuario ya tiene creditos activos\"\n        );\n        require(\n            _rate > 0 && _totalInstallments >= 4,\n            \"Las opciones ingresadas no son validas\"\n        );\n\n        companies[msg.sender].avaiableBalance -= _amount;\n        companies[msg.sender].creditBalance += _amount;\n        userStats[msg.sender].exists = true;\n        userStats[msg.sender].creditsReceived += _amount;\n\n        Credit memory credit;\n\n        credit.id = creditCounter;\n        credit.user = _user;\n        credit.amount = _amount; // monto prestado\n        credit.lender = msg.sender; // pago por 0% de intereses\n        credit.rate = _rate; /* %5 */\n        credit.nextInstallmentDate = block.timestamp + 30 days; // fecha del primer pago por el periodo\n        credit\n            .totalInstallments = _totalInstallments; /* cuantas cuotas se prestan */\n        credit.protocolFee = companies[msg.sender].protocolFee;\n        credit.totalAmount = _amount + ((_amount * _rate) / 100);\n\n        credits[creditCounter] = credit;\n        recentCredits[_user] = credit;\n        companyRegisteredCredits[msg.sender].push(credit);\n\n        creditCounter++;\n    }\n\n    function payInstallment(uint256 _amount) external {\n        require(\n            recentCredits[msg.sender].isActive == true,\n            \"El credito no esta activo\"\n        );\n        uint256 _creditId = recentCredits[msg.sender].id;\n        uint256 _installmentId = 0;\n\n        for (uint256 i = 0; i < installments[_creditId].length; i++) {\n            if (installments[_creditId][i].isPaid == false) {\n                _installmentId = i;\n                break;\n            }\n        }\n\n        require(\n            _amount == installments[_creditId][_installmentId].amount,\n            \"El monto pagado no es correcto\"\n        );\n        require(\n            usdc.transferFrom(msg.sender, address(this), _amount),\n            \"USDC transfer failed\"\n        );\n\n        uint256 _date = installments[_creditId][_installmentId].date;\n\n        installments[_creditId][_installmentId].isPaid = true;\n        installments[_creditId][_installmentId].date = block.timestamp;\n\n        installments[_creditId][_installmentId].score = _amount;\n\n        companies[credits[_creditId].lender].avaiableBalance += _amount;\n        companies[credits[_creditId].lender].balance += _amount;\n        unchecked {\n            if (_amount >= companies[credits[_creditId].lender].creditBalance) {\n                companies[credits[_creditId].lender].creditBalance = 0;\n            } else {\n                companies[credits[_creditId].lender].creditBalance -= _amount;\n            }\n        }\n        uint256 scoreIncrement;\n        if (block.timestamp < (_date - 5 days)) {\n            scoreIncrement = _amount * 2;\n        } else if (block.timestamp < (_date + 1 minutes)) {\n            scoreIncrement = _amount;\n        } else {\n            scoreIncrement = _amount;\n        }\n\n        installments[_creditId][_installmentId].score += scoreIncrement;\n        userStats[credits[_creditId].user].score += scoreIncrement;\n        userStats[credits[_creditId].user].creditsPaid += _amount;\n\n        if (_installmentId == credits[_creditId].totalInstallments - 1) {\n            credits[_creditId].isPaid = true;\n            credits[_creditId].isActive = false;\n            recentCredits[credits[_creditId].user].isActive = false;\n            recentCredits[credits[_creditId].user].isPaid = true;\n            users[credits[_creditId].user].hasActiveCredit = false;\n            Credit[] storage companyCredits = companyRegisteredCredits[\n                credits[_creditId].lender\n            ];\n            for (uint256 i = 0; i < companyCredits.length; i++) {\n                if (companyCredits[i].id == _creditId) {\n                    companyCredits[i] = companyCredits[\n                        companyCredits.length - 1\n                    ];\n                    companyCredits.pop();\n                    break;\n                }\n            }\n        }\n    }\n\n    function acceptCredit() external returns (Credit memory) {\n        require(\n            users[msg.sender].hasActiveCredit == false,\n            \"El usuario ya tiene creditos activos\"\n        );\n        require(\n            recentCredits[msg.sender].user == msg.sender,\n            \"El credito no pertenece al usuario\"\n        );\n\n        users[msg.sender].hasActiveCredit = true;\n        recentCredits[msg.sender].isActive = true;\n        uint256 _creditId = recentCredits[msg.sender].id;\n        credits[_creditId].isActive = true;\n        Credit[] storage companyCredits = companyRegisteredCredits[\n            credits[_creditId].lender\n        ];\n        for (uint256 i = 0; i < companyCredits.length; i++) {\n            if (companyCredits[i].id == _creditId) {\n                companyCredits[i].isActive = true;\n                break;\n            }\n        }\n\n        for (\n            uint256 i = 0;\n            i < recentCredits[msg.sender].totalInstallments;\n            i++\n        ) {\n            addInstallment(\n                _creditId,\n                recentCredits[msg.sender].totalAmount /\n                    recentCredits[msg.sender].totalInstallments,\n                i\n            );\n        }\n\n        userStats[msg.sender].creditsReceived += recentCredits[msg.sender]\n            .amount;\n        userStats[msg.sender].avaiableOnTimeScore += recentCredits[msg.sender]\n            .totalAmount;\n        bool success = usdc.transfer(\n            msg.sender,\n            recentCredits[msg.sender].amount\n        );\n        require(success, \"Transferencia fallida\");\n        return credits[_creditId];\n    }\n\n    function getCompanyCredits(\n        address _company\n    ) external view returns (Credit[] memory) {\n        return companyRegisteredCredits[_company];\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}